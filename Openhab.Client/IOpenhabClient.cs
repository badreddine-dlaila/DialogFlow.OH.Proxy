// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Openhab.Clinet
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface IOpenhabClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetRootWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all bindings.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BindingInfoDTO>>> GetAllWithHttpMessagesAsync(string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get binding configuration for given binding ID.
        /// </summary>
        /// <param name='bindingId'>
        /// service ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetConfigurationWithHttpMessagesAsync(string bindingId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a binding configuration for given binding ID and returns
        /// the old configuration.
        /// </summary>
        /// <param name='bindingId'>
        /// service ID
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> UpdateConfigurationWithHttpMessagesAsync(string bindingId, IDictionary<string, object> body = default(IDictionary<string, object>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all available channel types.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ChannelTypeDTO>>> GetAll1WithHttpMessagesAsync(string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets channel type by UID.
        /// </summary>
        /// <param name='channelTypeUID'>
        /// channelTypeUID
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ChannelTypeDTO>> GetByUIDWithHttpMessagesAsync(string channelTypeUID, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the item types the given trigger channel type UID can be
        /// linked to.
        /// </summary>
        /// <param name='channelTypeUID'>
        /// channelTypeUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> GetLinkableItemTypesWithHttpMessagesAsync(string channelTypeUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all available config descriptions.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='scheme'>
        /// scheme filter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConfigDescriptionDTO>>> GetAll2WithHttpMessagesAsync(string acceptLanguage = default(string), string scheme = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a config description by URI.
        /// </summary>
        /// <param name='uri'>
        /// uri
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConfigDescriptionDTO>> GetByURIWithHttpMessagesAsync(string uri, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all bindings that support discovery.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> GetDiscoveryServicesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts asynchronous discovery process for a binding and returns the
        /// timeout in seconds of the discovery operation.
        /// </summary>
        /// <param name='bindingId'>
        /// bindingId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<int?>> ScanWithHttpMessagesAsync(string bindingId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all extensions.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetExtensionsWithHttpMessagesAsync(string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all extension types.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetTypesWithHttpMessagesAsync(string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Installs the extension from the given URL.
        /// </summary>
        /// <param name='url'>
        /// extension install URL
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> InstallExtensionByURLWithHttpMessagesAsync(string url, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get extension with given ID.
        /// </summary>
        /// <param name='extensionId'>
        /// extension ID
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetByIdWithHttpMessagesAsync(string extensionId, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Installs the extension with the given ID.
        /// </summary>
        /// <param name='extensionId'>
        /// extension ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> InstallExtensionWithHttpMessagesAsync(string extensionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='extensionId'>
        /// extension ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UninstallExtensionWithHttpMessagesAsync(string extensionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all item named attributes.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ChatReply>> GetAttributesWithHttpMessagesAsync(string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all cards of the card deck.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAllCardsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new card in the card deck.
        /// </summary>
        /// <param name='body'>
        /// card
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateCardWithHttpMessagesAsync(Card body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new card in the card deck.
        /// </summary>
        /// <param name='skip'>
        /// </param>
        /// <param name='count'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateCard1WithHttpMessagesAsync(int? skip = default(int?), int? count = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a card from the card deck by its UID.
        /// </summary>
        /// <param name='cardUID'>
        /// cardUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetCardByUidWithHttpMessagesAsync(string cardUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a card in the card deck.
        /// </summary>
        /// <param name='cardUID'>
        /// cardUID
        /// </param>
        /// <param name='body'>
        /// card
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateCardWithHttpMessagesAsync(string cardUID, Card body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a card from the card deck.
        /// </summary>
        /// <param name='cardUID'>
        /// cardUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteCardWithHttpMessagesAsync(string cardUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets a bookmark on a card.
        /// </summary>
        /// <param name='cardUID'>
        /// cardUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetCardBookmarkWithHttpMessagesAsync(string cardUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes the bookmark on a card.
        /// </summary>
        /// <param name='cardUID'>
        /// cardUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UnsetCardBookmarkWithHttpMessagesAsync(string cardUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the timestamp on a card to the current time
        /// </summary>
        /// <param name='cardUID'>
        /// cardUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateCardTimestampWithHttpMessagesAsync(string cardUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a query to HABot to interpret.
        /// </summary>
        /// <param name='body'>
        /// human language query
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ChatReply>> ChatWithHttpMessagesAsync(string body, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new card in the card deck (compatibility endpoint).
        /// </summary>
        /// <param name='body'>
        /// card
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateCard2WithHttpMessagesAsync(string body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a card in the card deck (compatibility endpoint).
        /// </summary>
        /// <param name='cardUID'>
        /// cardUID
        /// </param>
        /// <param name='body'>
        /// card
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateCard1WithHttpMessagesAsync(string cardUID, string body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a card from the card deck (compatibility endpoint).
        /// </summary>
        /// <param name='cardUID'>
        /// cardUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteCardPostWithHttpMessagesAsync(string cardUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes the bookmark on a card (compatibility endpoint).
        /// </summary>
        /// <param name='cardUID'>
        /// cardUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UnsetCardBookmarkCompatWithHttpMessagesAsync(string cardUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a first greeting message from the bot in the specified or
        /// configured language.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// language (will use the default if omitted)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ChatReply>> GreetWithHttpMessagesAsync(string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribes a new client for push notifications.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> WebPushSubscribeWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets or generates the public VAPID key used for push notifications.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> WebPushConfigWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of widget gallery items.
        /// </summary>
        /// <param name='galleryName'>
        /// gallery name e.g. 'community'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetGalleryWidgetListWithHttpMessagesAsync(string galleryName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the details about a widget gallery item.
        /// </summary>
        /// <param name='galleryName'>
        /// gallery name e.g. 'community'
        /// </param>
        /// <param name='id'>
        /// id within the gallery
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetGalleryWidgetsItemWithHttpMessagesAsync(string galleryName, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='acceptLanguage'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAll3WithHttpMessagesAsync(string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all discovered things.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DiscoveryResultDTO>> GetAll4WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes the discovery result from the inbox.
        /// </summary>
        /// <param name='thingUID'>
        /// thingUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteWithHttpMessagesAsync(string thingUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Approves the discovery result by adding the thing to the registry.
        /// </summary>
        /// <param name='thingUID'>
        /// thingUID
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='body'>
        /// thing label
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApproveWithHttpMessagesAsync(string thingUID, string acceptLanguage = default(string), string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Flags a discovery result as ignored for further processing.
        /// </summary>
        /// <param name='thingUID'>
        /// thingUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> IgnoreWithHttpMessagesAsync(string thingUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes ignore flag from a discovery result.
        /// </summary>
        /// <param name='thingUID'>
        /// thingUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UnignoreWithHttpMessagesAsync(string thingUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all available items.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='type'>
        /// item type filter
        /// </param>
        /// <param name='tags'>
        /// item tag filter
        /// </param>
        /// <param name='metadata'>
        /// metadata selector
        /// </param>
        /// <param name='recursive'>
        /// get member items recursively
        /// </param>
        /// <param name='fields'>
        /// limit output to the given fields (comma separated)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<EnrichedItemDTO>>> GetItemsWithHttpMessagesAsync(string acceptLanguage = default(string), string type = default(string), string tags = default(string), string metadata = default(string), bool? recursive = false, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a list of items to the registry or updates the existing items.
        /// </summary>
        /// <param name='body'>
        /// array of item data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> CreateOrUpdateItemsWithHttpMessagesAsync(IList<GroupItemDTO> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a new member to a group item.
        /// </summary>
        /// <param name='itemName'>
        /// item name
        /// </param>
        /// <param name='memberItemName'>
        /// member item name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddMemberWithHttpMessagesAsync(string itemName, string memberItemName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes an existing member from a group item.
        /// </summary>
        /// <param name='itemName'>
        /// item name
        /// </param>
        /// <param name='memberItemName'>
        /// member item name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RemoveMemberWithHttpMessagesAsync(string itemName, string memberItemName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single item.
        /// </summary>
        /// <param name='itemname'>
        /// item name
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='metadata'>
        /// metadata selector
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EnrichedItemDTO>> GetItemDataWithHttpMessagesAsync(string itemname, string acceptLanguage = default(string), string metadata = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a command to an item.
        /// </summary>
        /// <param name='itemname'>
        /// item name
        /// </param>
        /// <param name='body'>
        /// valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemCommandWithHttpMessagesAsync(string itemname, string body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a new item to the registry or updates the existing item.
        /// </summary>
        /// <param name='itemname'>
        /// item name
        /// </param>
        /// <param name='body'>
        /// item data
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> CreateOrUpdateItemWithHttpMessagesAsync(string itemname, GroupItemDTO body, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes an item from the registry.
        /// </summary>
        /// <param name='itemname'>
        /// item name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RemoveItemWithHttpMessagesAsync(string itemname, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds metadata to an item.
        /// </summary>
        /// <param name='itemname'>
        /// item name
        /// </param>
        /// <param name='namespaceParameter'>
        /// namespace
        /// </param>
        /// <param name='body'>
        /// metadata
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddMetadataWithHttpMessagesAsync(string itemname, string namespaceParameter, MetadataDTO body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes metadata from an item.
        /// </summary>
        /// <param name='itemname'>
        /// item name
        /// </param>
        /// <param name='namespaceParameter'>
        /// namespace
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RemoveMetadataWithHttpMessagesAsync(string itemname, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the state of an item.
        /// </summary>
        /// <param name='itemname'>
        /// item name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetPlainItemStateWithHttpMessagesAsync(string itemname, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the state of an item.
        /// </summary>
        /// <param name='itemname'>
        /// item name
        /// </param>
        /// <param name='body'>
        /// valid item state (e.g. ON, OFF)
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PutItemStateWithHttpMessagesAsync(string itemname, string body, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a tag to an item.
        /// </summary>
        /// <param name='itemname'>
        /// item name
        /// </param>
        /// <param name='tag'>
        /// tag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddTagWithHttpMessagesAsync(string itemname, string tag, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes a tag from an item.
        /// </summary>
        /// <param name='itemname'>
        /// item name
        /// </param>
        /// <param name='tag'>
        /// tag
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RemoveTagWithHttpMessagesAsync(string itemname, string tag, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all available links.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemChannelLinkDTO>> GetAll5WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Tells whether automatic link mode is active or not
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool?>> IsAutomaticWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves links.
        /// </summary>
        /// <param name='itemName'>
        /// itemName
        /// </param>
        /// <param name='channelUID'>
        /// channelUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetLinkWithHttpMessagesAsync(string itemName, string channelUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Links item to a channel.
        /// </summary>
        /// <param name='itemName'>
        /// itemName
        /// </param>
        /// <param name='channelUID'>
        /// channelUID
        /// </param>
        /// <param name='body'>
        /// link data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> LinkWithHttpMessagesAsync(string itemName, string channelUID, ItemChannelLinkDTO body = default(ItemChannelLinkDTO), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unlinks item from a channel.
        /// </summary>
        /// <param name='itemName'>
        /// itemName
        /// </param>
        /// <param name='channelUID'>
        /// channelUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UnlinkWithHttpMessagesAsync(string itemName, string channelUID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of persistence services.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> HttpGetPersistenceServicesWithHttpMessagesAsync(string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of items available via a specific persistence service.
        /// </summary>
        /// <param name='serviceId'>
        /// Id of the persistence service. If not provided the default service
        /// will be used
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> HttpGetPersistenceServiceItemsWithHttpMessagesAsync(string serviceId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets item persistence data from the persistence service.
        /// </summary>
        /// <param name='itemname'>
        /// The item name
        /// </param>
        /// <param name='serviceId'>
        /// Id of the persistence service. If not provided the default service
        /// will be used
        /// </param>
        /// <param name='starttime'>
        /// Start time of the data to return. Will default to 1 day before
        /// endtime. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
        /// </param>
        /// <param name='endtime'>
        /// End time of the data to return. Will default to current time.
        /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
        /// </param>
        /// <param name='page'>
        /// Page number of data to return. This parameter will enable paging.
        /// </param>
        /// <param name='pagelength'>
        /// The length of each page.
        /// </param>
        /// <param name='boundary'>
        /// Gets one value before and after the requested period.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemHistoryDTO>> HttpGetPersistenceItemDataWithHttpMessagesAsync(string itemname, string serviceId = default(string), string starttime = default(string), string endtime = default(string), int? page = default(int?), int? pagelength = default(int?), bool? boundary = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stores item persistence data into the persistence service.
        /// </summary>
        /// <param name='itemname'>
        /// The item name.
        /// </param>
        /// <param name='time'>
        /// Time of the data to be stored. Will default to current time.
        /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
        /// </param>
        /// <param name='state'>
        /// The state to store.
        /// </param>
        /// <param name='serviceId'>
        /// Id of the persistence service. If not provided the default service
        /// will be used
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemHistoryDTO>> HttpPutPersistenceItemDataWithHttpMessagesAsync(string itemname, string time, string state, string serviceId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete item data from a specific persistence service.
        /// </summary>
        /// <param name='serviceId'>
        /// Id of the persistence service.
        /// </param>
        /// <param name='itemname'>
        /// The item name.
        /// </param>
        /// <param name='starttime'>
        /// Start time of the data to return. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
        /// </param>
        /// <param name='endtime'>
        /// End time of the data to return. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> HttpDeletePersistenceServiceItemWithHttpMessagesAsync(string serviceId, string itemname, string starttime, string endtime, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all available profile types.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='channelTypeUID'>
        /// channel type filter
        /// </param>
        /// <param name='itemType'>
        /// item type filter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ProfileTypeDTO>>> GetAll6WithHttpMessagesAsync(string acceptLanguage = default(string), string channelTypeUID = default(string), string itemType = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all configurable services.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConfigurableServiceDTO>>> GetAll7WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get configurable service for given service ID.
        /// </summary>
        /// <param name='serviceId'>
        /// service ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConfigurableServiceDTO>> GetById1WithHttpMessagesAsync(string serviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get service configuration for given service ID.
        /// </summary>
        /// <param name='serviceId'>
        /// service ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetConfiguration1WithHttpMessagesAsync(string serviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a service configuration for given service ID and returns
        /// the old configuration.
        /// </summary>
        /// <param name='serviceId'>
        /// service ID
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> UpdateConfiguration1WithHttpMessagesAsync(string serviceId, IDictionary<string, object> body = default(IDictionary<string, object>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a service configuration for given service ID and returns
        /// the old configuration.
        /// </summary>
        /// <param name='serviceId'>
        /// service ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> DeleteConfigurationWithHttpMessagesAsync(string serviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get existing multiple context service configurations for the given
        /// factory PID.
        /// </summary>
        /// <param name='serviceId'>
        /// service ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConfigurableServiceDTO>>> GetMultiConfigServicesByFactoryPidWithHttpMessagesAsync(string serviceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all available sitemaps.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetSitemapsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a sitemap event subscription.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateEventSubscriptionWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get sitemap events.
        /// </summary>
        /// <param name='subscriptionid'>
        /// subscription id
        /// </param>
        /// <param name='sitemap'>
        /// sitemap name
        /// </param>
        /// <param name='pageid'>
        /// page id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetSitemapEventsWithHttpMessagesAsync(string subscriptionid, string sitemap = default(string), string pageid = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get sitemap by name.
        /// </summary>
        /// <param name='sitemapname'>
        /// sitemap name
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='type'>
        /// </param>
        /// <param name='jsoncallback'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetSitemapDataWithHttpMessagesAsync(string sitemapname, string acceptLanguage = default(string), string type = default(string), string jsoncallback = "callback", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Polls the data for a sitemap.
        /// </summary>
        /// <param name='sitemapname'>
        /// sitemap name
        /// </param>
        /// <param name='pageid'>
        /// page id
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='subscriptionid'>
        /// subscriptionid
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetPageDataWithHttpMessagesAsync(string sitemapname, string pageid, string acceptLanguage = default(string), string subscriptionid = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all available thing types without config description, channels
        /// and properties.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<StrippedThingTypeDTO>>> GetAll8WithHttpMessagesAsync(string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets thing type by UID.
        /// </summary>
        /// <param name='thingTypeUID'>
        /// thingTypeUID
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ThingTypeDTO>> GetByUID1WithHttpMessagesAsync(string thingTypeUID, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all available things.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<EnrichedThingDTO>>> GetAll9WithHttpMessagesAsync(string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new thing and adds it to the registry.
        /// </summary>
        /// <param name='body'>
        /// thing data
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> CreateWithHttpMessagesAsync(ThingDTO body, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets thing by UID.
        /// </summary>
        /// <param name='thingUID'>
        /// thingUID
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ThingDTO>> GetByUID2WithHttpMessagesAsync(string thingUID, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a thing.
        /// </summary>
        /// <param name='thingUID'>
        /// thingUID
        /// </param>
        /// <param name='body'>
        /// thing
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ThingDTO>> UpdateWithHttpMessagesAsync(string thingUID, ThingDTO body, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes a thing from the registry. Set 'force' to __true__ if you
        /// want the thing te be removed immediately.
        /// </summary>
        /// <param name='thingUID'>
        /// thingUID
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='force'>
        /// force
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RemoveWithHttpMessagesAsync(string thingUID, string acceptLanguage = default(string), bool? force = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates thing's configuration.
        /// </summary>
        /// <param name='thingUID'>
        /// thing
        /// </param>
        /// <param name='acceptLanguage'>
        /// </param>
        /// <param name='body'>
        /// configuration parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ThingDTO>> UpdateConfiguration2WithHttpMessagesAsync(string thingUID, string acceptLanguage = default(string), IDictionary<string, object> body = default(IDictionary<string, object>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets thing's config status.
        /// </summary>
        /// <param name='thingUID'>
        /// thing
        /// </param>
        /// <param name='acceptLanguage'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetConfigStatusWithHttpMessagesAsync(string thingUID, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets the thing enabled status.
        /// </summary>
        /// <param name='thingUID'>
        /// thing
        /// </param>
        /// <param name='acceptLanguage'>
        /// </param>
        /// <param name='body'>
        /// enabled
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> SetEnabledWithHttpMessagesAsync(string thingUID, string acceptLanguage = default(string), string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets thing's firmware status.
        /// </summary>
        /// <param name='thingUID'>
        /// thing
        /// </param>
        /// <param name='acceptLanguage'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetFirmwareStatusWithHttpMessagesAsync(string thingUID, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update thing firmware.
        /// </summary>
        /// <param name='thingUID'>
        /// thing
        /// </param>
        /// <param name='firmwareVersion'>
        /// version
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateFirmwareWithHttpMessagesAsync(string thingUID, string firmwareVersion, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all available firmwares for provided thing UID
        /// </summary>
        /// <param name='thingUID'>
        /// thingUID
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetFirmwaresWithHttpMessagesAsync(string thingUID, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets thing's status.
        /// </summary>
        /// <param name='thingUID'>
        /// thing
        /// </param>
        /// <param name='acceptLanguage'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetStatusWithHttpMessagesAsync(string thingUID, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// A unified unique id.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetInstanceUUIDWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the list of all interpreters.
        /// </summary>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetInterpretersWithHttpMessagesAsync(string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a text to the default human language interpreter.
        /// </summary>
        /// <param name='body'>
        /// text to interpret
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> InterpretWithHttpMessagesAsync(string body, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single interpreters.
        /// </summary>
        /// <param name='id'>
        /// interpreter id
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetInterpreterWithHttpMessagesAsync(string id, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a text to a given human language interpreter.
        /// </summary>
        /// <param name='body'>
        /// text to interpret
        /// </param>
        /// <param name='id'>
        /// interpreter id
        /// </param>
        /// <param name='acceptLanguage'>
        /// language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> Interpret1WithHttpMessagesAsync(string body, string id, string acceptLanguage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
