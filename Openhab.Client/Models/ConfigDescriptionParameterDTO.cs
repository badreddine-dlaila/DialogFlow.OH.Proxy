// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Openhab.Clinet.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ConfigDescriptionParameterDTO
    {
        /// <summary>
        /// Initializes a new instance of the ConfigDescriptionParameterDTO
        /// class.
        /// </summary>
        public ConfigDescriptionParameterDTO()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConfigDescriptionParameterDTO
        /// class.
        /// </summary>
        /// <param name="type">Possible values include: 'TEXT', 'INTEGER',
        /// 'DECIMAL', 'BOOLEAN'</param>
        public ConfigDescriptionParameterDTO(string context = default(string), string defaultValue = default(string), string description = default(string), string label = default(string), string name = default(string), bool? required = default(bool?), string type = default(string), double? min = default(double?), double? max = default(double?), double? stepsize = default(double?), string pattern = default(string), bool? readOnlyProperty = default(bool?), bool? multiple = default(bool?), int? multipleLimit = default(int?), string groupName = default(string), bool? advanced = default(bool?), bool? verify = default(bool?), bool? limitToOptions = default(bool?), string unit = default(string), string unitLabel = default(string), IList<ParameterOptionDTO> options = default(IList<ParameterOptionDTO>), IList<FilterCriteriaDTO> filterCriteria = default(IList<FilterCriteriaDTO>))
        {
            Context = context;
            DefaultValue = defaultValue;
            Description = description;
            Label = label;
            Name = name;
            Required = required;
            Type = type;
            Min = min;
            Max = max;
            Stepsize = stepsize;
            Pattern = pattern;
            ReadOnlyProperty = readOnlyProperty;
            Multiple = multiple;
            MultipleLimit = multipleLimit;
            GroupName = groupName;
            Advanced = advanced;
            Verify = verify;
            LimitToOptions = limitToOptions;
            Unit = unit;
            UnitLabel = unitLabel;
            Options = options;
            FilterCriteria = filterCriteria;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public string Context { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "defaultValue")]
        public string DefaultValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "required")]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'TEXT', 'INTEGER', 'DECIMAL',
        /// 'BOOLEAN'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "min")]
        public double? Min { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "max")]
        public double? Max { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "stepsize")]
        public double? Stepsize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pattern")]
        public string Pattern { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multiple")]
        public bool? Multiple { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multipleLimit")]
        public int? MultipleLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "groupName")]
        public string GroupName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "advanced")]
        public bool? Advanced { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "verify")]
        public bool? Verify { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "limitToOptions")]
        public bool? LimitToOptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unit")]
        public string Unit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unitLabel")]
        public string UnitLabel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "options")]
        public IList<ParameterOptionDTO> Options { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "filterCriteria")]
        public IList<FilterCriteriaDTO> FilterCriteria { get; set; }

    }
}
