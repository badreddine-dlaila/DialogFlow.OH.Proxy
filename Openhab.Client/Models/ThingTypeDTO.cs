// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Openhab.Clinet.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ThingTypeDTO
    {
        /// <summary>
        /// Initializes a new instance of the ThingTypeDTO class.
        /// </summary>
        public ThingTypeDTO()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ThingTypeDTO class.
        /// </summary>
        public ThingTypeDTO(string uID = default(string), string label = default(string), string description = default(string), string category = default(string), bool? listed = default(bool?), IList<string> supportedBridgeTypeUIDs = default(IList<string>), bool? bridge = default(bool?), IList<ChannelDefinitionDTO> channels = default(IList<ChannelDefinitionDTO>), IList<ChannelGroupDefinitionDTO> channelGroups = default(IList<ChannelGroupDefinitionDTO>), IList<ConfigDescriptionParameterDTO> configParameters = default(IList<ConfigDescriptionParameterDTO>), IList<ConfigDescriptionParameterGroupDTO> parameterGroups = default(IList<ConfigDescriptionParameterGroupDTO>), IDictionary<string, string> properties = default(IDictionary<string, string>), IList<string> extensibleChannelTypeIds = default(IList<string>))
        {
            UID = uID;
            Label = label;
            Description = description;
            Category = category;
            Listed = listed;
            SupportedBridgeTypeUIDs = supportedBridgeTypeUIDs;
            Bridge = bridge;
            Channels = channels;
            ChannelGroups = channelGroups;
            ConfigParameters = configParameters;
            ParameterGroups = parameterGroups;
            Properties = properties;
            ExtensibleChannelTypeIds = extensibleChannelTypeIds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UID")]
        public string UID { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "listed")]
        public bool? Listed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "supportedBridgeTypeUIDs")]
        public IList<string> SupportedBridgeTypeUIDs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bridge")]
        public bool? Bridge { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "channels")]
        public IList<ChannelDefinitionDTO> Channels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "channelGroups")]
        public IList<ChannelGroupDefinitionDTO> ChannelGroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "configParameters")]
        public IList<ConfigDescriptionParameterDTO> ConfigParameters { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parameterGroups")]
        public IList<ConfigDescriptionParameterGroupDTO> ParameterGroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extensibleChannelTypeIds")]
        public IList<string> ExtensibleChannelTypeIds { get; set; }

    }
}
