// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Openhab.Clinet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ChannelDefinitionDTO
    {
        /// <summary>
        /// Initializes a new instance of the ChannelDefinitionDTO class.
        /// </summary>
        public ChannelDefinitionDTO()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ChannelDefinitionDTO class.
        /// </summary>
        public ChannelDefinitionDTO(string description = default(string), string id = default(string), string label = default(string), IList<string> tags = default(IList<string>), IDictionary<string, string> properties = default(IDictionary<string, string>), string category = default(string), StateDescription stateDescription = default(StateDescription), bool? advanced = default(bool?), string typeUID = default(string))
        {
            Description = description;
            Id = id;
            Label = label;
            Tags = tags;
            Properties = properties;
            Category = category;
            StateDescription = stateDescription;
            Advanced = advanced;
            TypeUID = typeUID;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "stateDescription")]
        public StateDescription StateDescription { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "advanced")]
        public bool? Advanced { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "typeUID")]
        public string TypeUID { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Tags != null)
            {
                if (Tags.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Tags)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Tags");
                }
            }
        }
    }
}
