// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Openhab.Clinet.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Card
    {
        /// <summary>
        /// Initializes a new instance of the Card class.
        /// </summary>
        public Card()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Card class.
        /// </summary>
        public Card(IDictionary<string, object> config = default(IDictionary<string, object>), IDictionary<string, IList<Component>> slots = default(IDictionary<string, IList<Component>>), string uid = default(string), string title = default(string), string subtitle = default(string), IList<string> tags = default(IList<string>), bool? bookmarked = default(bool?), bool? notReuseableInChat = default(bool?), bool? addToDeckDenied = default(bool?), bool? ephemeral = default(bool?), System.DateTime? timestamp = default(System.DateTime?), IList<string> objectAttributes = default(IList<string>), IList<string> locationAttributes = default(IList<string>), string name = default(string))
        {
            Config = config;
            Slots = slots;
            Uid = uid;
            Title = title;
            Subtitle = subtitle;
            Tags = tags;
            Bookmarked = bookmarked;
            NotReuseableInChat = notReuseableInChat;
            AddToDeckDenied = addToDeckDenied;
            Ephemeral = ephemeral;
            Timestamp = timestamp;
            ObjectAttributes = objectAttributes;
            LocationAttributes = locationAttributes;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "config")]
        public IDictionary<string, object> Config { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "slots")]
        public IDictionary<string, IList<Component>> Slots { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uid")]
        public string Uid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subtitle")]
        public string Subtitle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bookmarked")]
        public bool? Bookmarked { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notReuseableInChat")]
        public bool? NotReuseableInChat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "addToDeckDenied")]
        public bool? AddToDeckDenied { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ephemeral")]
        public bool? Ephemeral { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "objectAttributes")]
        public IList<string> ObjectAttributes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "locationAttributes")]
        public IList<string> LocationAttributes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Tags != null)
            {
                if (Tags.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Tags)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Tags");
                }
            }
            if (ObjectAttributes != null)
            {
                if (ObjectAttributes.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(ObjectAttributes)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "ObjectAttributes");
                }
            }
            if (LocationAttributes != null)
            {
                if (LocationAttributes.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(LocationAttributes)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "LocationAttributes");
                }
            }
        }
    }
}
