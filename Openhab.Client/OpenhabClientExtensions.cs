// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Openhab.Clinet
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OpenhabClient.
    /// </summary>
    public static partial class OpenhabClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetRoot(this IOpenhabClient operations)
            {
                operations.GetRootAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetRootAsync(this IOpenhabClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetRootWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all bindings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static IList<BindingInfoDTO> GetAll(this IOpenhabClient operations, string acceptLanguage = default(string))
            {
                return operations.GetAllAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all bindings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BindingInfoDTO>> GetAllAsync(this IOpenhabClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get binding configuration for given binding ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// service ID
            /// </param>
            public static string GetConfiguration(this IOpenhabClient operations, string bindingId)
            {
                return operations.GetConfigurationAsync(bindingId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get binding configuration for given binding ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// service ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetConfigurationAsync(this IOpenhabClient operations, string bindingId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationWithHttpMessagesAsync(bindingId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a binding configuration for given binding ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// service ID
            /// </param>
            /// <param name='body'>
            /// </param>
            public static string UpdateConfiguration(this IOpenhabClient operations, string bindingId, IDictionary<string, object> body = default(IDictionary<string, object>))
            {
                return operations.UpdateConfigurationAsync(bindingId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a binding configuration for given binding ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// service ID
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpdateConfigurationAsync(this IOpenhabClient operations, string bindingId, IDictionary<string, object> body = default(IDictionary<string, object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConfigurationWithHttpMessagesAsync(bindingId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all available channel types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static IList<ChannelTypeDTO> GetAll1(this IOpenhabClient operations, string acceptLanguage = default(string))
            {
                return operations.GetAll1Async(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available channel types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ChannelTypeDTO>> GetAll1Async(this IOpenhabClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll1WithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets channel type by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelTypeUID'>
            /// channelTypeUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static ChannelTypeDTO GetByUID(this IOpenhabClient operations, string channelTypeUID, string acceptLanguage = default(string))
            {
                return operations.GetByUIDAsync(channelTypeUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets channel type by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelTypeUID'>
            /// channelTypeUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChannelTypeDTO> GetByUIDAsync(this IOpenhabClient operations, string channelTypeUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByUIDWithHttpMessagesAsync(channelTypeUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the item types the given trigger channel type UID can be linked to.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelTypeUID'>
            /// channelTypeUID
            /// </param>
            public static IList<string> GetLinkableItemTypes(this IOpenhabClient operations, string channelTypeUID)
            {
                return operations.GetLinkableItemTypesAsync(channelTypeUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the item types the given trigger channel type UID can be linked to.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelTypeUID'>
            /// channelTypeUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetLinkableItemTypesAsync(this IOpenhabClient operations, string channelTypeUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLinkableItemTypesWithHttpMessagesAsync(channelTypeUID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all available config descriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='scheme'>
            /// scheme filter
            /// </param>
            public static IList<ConfigDescriptionDTO> GetAll2(this IOpenhabClient operations, string acceptLanguage = default(string), string scheme = default(string))
            {
                return operations.GetAll2Async(acceptLanguage, scheme).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available config descriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='scheme'>
            /// scheme filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConfigDescriptionDTO>> GetAll2Async(this IOpenhabClient operations, string acceptLanguage = default(string), string scheme = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll2WithHttpMessagesAsync(acceptLanguage, scheme, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a config description by URI.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uri'>
            /// uri
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static ConfigDescriptionDTO GetByURI(this IOpenhabClient operations, string uri, string acceptLanguage = default(string))
            {
                return operations.GetByURIAsync(uri, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a config description by URI.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uri'>
            /// uri
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigDescriptionDTO> GetByURIAsync(this IOpenhabClient operations, string uri, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByURIWithHttpMessagesAsync(uri, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all bindings that support discovery.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetDiscoveryServices(this IOpenhabClient operations)
            {
                return operations.GetDiscoveryServicesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all bindings that support discovery.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetDiscoveryServicesAsync(this IOpenhabClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiscoveryServicesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts asynchronous discovery process for a binding and returns the timeout
            /// in seconds of the discovery operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// bindingId
            /// </param>
            public static int? Scan(this IOpenhabClient operations, string bindingId)
            {
                return operations.ScanAsync(bindingId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts asynchronous discovery process for a binding and returns the timeout
            /// in seconds of the discovery operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bindingId'>
            /// bindingId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> ScanAsync(this IOpenhabClient operations, string bindingId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ScanWithHttpMessagesAsync(bindingId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all extensions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static string GetExtensions(this IOpenhabClient operations, string acceptLanguage = default(string))
            {
                return operations.GetExtensionsAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all extensions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetExtensionsAsync(this IOpenhabClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExtensionsWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all extension types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static string GetTypes(this IOpenhabClient operations, string acceptLanguage = default(string))
            {
                return operations.GetTypesAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all extension types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetTypesAsync(this IOpenhabClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTypesWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Installs the extension from the given URL.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// extension install URL
            /// </param>
            public static void InstallExtensionByURL(this IOpenhabClient operations, string url)
            {
                operations.InstallExtensionByURLAsync(url).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Installs the extension from the given URL.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// extension install URL
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InstallExtensionByURLAsync(this IOpenhabClient operations, string url, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InstallExtensionByURLWithHttpMessagesAsync(url, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get extension with given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static string GetById(this IOpenhabClient operations, string extensionId, string acceptLanguage = default(string))
            {
                return operations.GetByIdAsync(extensionId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get extension with given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetByIdAsync(this IOpenhabClient operations, string extensionId, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(extensionId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Installs the extension with the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            public static void InstallExtension(this IOpenhabClient operations, string extensionId)
            {
                operations.InstallExtensionAsync(extensionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Installs the extension with the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InstallExtensionAsync(this IOpenhabClient operations, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InstallExtensionWithHttpMessagesAsync(extensionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            public static void UninstallExtension(this IOpenhabClient operations, string extensionId)
            {
                operations.UninstallExtensionAsync(extensionId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='extensionId'>
            /// extension ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UninstallExtensionAsync(this IOpenhabClient operations, string extensionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UninstallExtensionWithHttpMessagesAsync(extensionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all item named attributes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static ChatReply GetAttributes(this IOpenhabClient operations, string acceptLanguage = default(string))
            {
                return operations.GetAttributesAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all item named attributes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChatReply> GetAttributesAsync(this IOpenhabClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttributesWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all cards of the card deck.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetAllCards(this IOpenhabClient operations)
            {
                operations.GetAllCardsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all cards of the card deck.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAllCardsAsync(this IOpenhabClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAllCardsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new card in the card deck.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// card
            /// </param>
            public static void CreateCard(this IOpenhabClient operations, Card body)
            {
                operations.CreateCardAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new card in the card deck.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// card
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateCardAsync(this IOpenhabClient operations, Card body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateCardWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new card in the card deck.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='count'>
            /// </param>
            public static void CreateCard1(this IOpenhabClient operations, int? skip = default(int?), int? count = default(int?))
            {
                operations.CreateCard1Async(skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new card in the card deck.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateCard1Async(this IOpenhabClient operations, int? skip = default(int?), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateCard1WithHttpMessagesAsync(skip, count, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a card from the card deck by its UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            public static void GetCardByUid(this IOpenhabClient operations, string cardUID)
            {
                operations.GetCardByUidAsync(cardUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a card from the card deck by its UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetCardByUidAsync(this IOpenhabClient operations, string cardUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetCardByUidWithHttpMessagesAsync(cardUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a card in the card deck.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            /// <param name='body'>
            /// card
            /// </param>
            public static void UpdateCard(this IOpenhabClient operations, string cardUID, Card body)
            {
                operations.UpdateCardAsync(cardUID, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a card in the card deck.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            /// <param name='body'>
            /// card
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateCardAsync(this IOpenhabClient operations, string cardUID, Card body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateCardWithHttpMessagesAsync(cardUID, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a card from the card deck.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            public static void DeleteCard(this IOpenhabClient operations, string cardUID)
            {
                operations.DeleteCardAsync(cardUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a card from the card deck.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCardAsync(this IOpenhabClient operations, string cardUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCardWithHttpMessagesAsync(cardUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sets a bookmark on a card.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            public static void SetCardBookmark(this IOpenhabClient operations, string cardUID)
            {
                operations.SetCardBookmarkAsync(cardUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets a bookmark on a card.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetCardBookmarkAsync(this IOpenhabClient operations, string cardUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetCardBookmarkWithHttpMessagesAsync(cardUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes the bookmark on a card.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            public static void UnsetCardBookmark(this IOpenhabClient operations, string cardUID)
            {
                operations.UnsetCardBookmarkAsync(cardUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the bookmark on a card.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnsetCardBookmarkAsync(this IOpenhabClient operations, string cardUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnsetCardBookmarkWithHttpMessagesAsync(cardUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the timestamp on a card to the current time
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            public static void UpdateCardTimestamp(this IOpenhabClient operations, string cardUID)
            {
                operations.UpdateCardTimestampAsync(cardUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the timestamp on a card to the current time
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateCardTimestampAsync(this IOpenhabClient operations, string cardUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateCardTimestampWithHttpMessagesAsync(cardUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Send a query to HABot to interpret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// human language query
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static ChatReply Chat(this IOpenhabClient operations, string body, string acceptLanguage = default(string))
            {
                return operations.ChatAsync(body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a query to HABot to interpret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// human language query
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChatReply> ChatAsync(this IOpenhabClient operations, string body, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChatWithHttpMessagesAsync(body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new card in the card deck (compatibility endpoint).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// card
            /// </param>
            public static void CreateCard2(this IOpenhabClient operations, string body)
            {
                operations.CreateCard2Async(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new card in the card deck (compatibility endpoint).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// card
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateCard2Async(this IOpenhabClient operations, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateCard2WithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a card in the card deck (compatibility endpoint).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            /// <param name='body'>
            /// card
            /// </param>
            public static void UpdateCard1(this IOpenhabClient operations, string cardUID, string body)
            {
                operations.UpdateCard1Async(cardUID, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a card in the card deck (compatibility endpoint).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            /// <param name='body'>
            /// card
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateCard1Async(this IOpenhabClient operations, string cardUID, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateCard1WithHttpMessagesAsync(cardUID, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a card from the card deck (compatibility endpoint).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            public static void DeleteCardPost(this IOpenhabClient operations, string cardUID)
            {
                operations.DeleteCardPostAsync(cardUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a card from the card deck (compatibility endpoint).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCardPostAsync(this IOpenhabClient operations, string cardUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCardPostWithHttpMessagesAsync(cardUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes the bookmark on a card (compatibility endpoint).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            public static void UnsetCardBookmarkCompat(this IOpenhabClient operations, string cardUID)
            {
                operations.UnsetCardBookmarkCompatAsync(cardUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the bookmark on a card (compatibility endpoint).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cardUID'>
            /// cardUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnsetCardBookmarkCompatAsync(this IOpenhabClient operations, string cardUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnsetCardBookmarkCompatWithHttpMessagesAsync(cardUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves a first greeting message from the bot in the specified or
            /// configured language.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language (will use the default if omitted)
            /// </param>
            public static ChatReply Greet(this IOpenhabClient operations, string acceptLanguage = default(string))
            {
                return operations.GreetAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a first greeting message from the bot in the specified or
            /// configured language.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language (will use the default if omitted)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChatReply> GreetAsync(this IOpenhabClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GreetWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Subscribes a new client for push notifications.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void WebPushSubscribe(this IOpenhabClient operations, string body = default(string))
            {
                operations.WebPushSubscribeAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribes a new client for push notifications.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task WebPushSubscribeAsync(this IOpenhabClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.WebPushSubscribeWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets or generates the public VAPID key used for push notifications.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void WebPushConfig(this IOpenhabClient operations)
            {
                operations.WebPushConfigAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets or generates the public VAPID key used for push notifications.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task WebPushConfigAsync(this IOpenhabClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.WebPushConfigWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the list of widget gallery items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryName'>
            /// gallery name e.g. 'community'
            /// </param>
            public static string GetGalleryWidgetList(this IOpenhabClient operations, string galleryName)
            {
                return operations.GetGalleryWidgetListAsync(galleryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of widget gallery items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryName'>
            /// gallery name e.g. 'community'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetGalleryWidgetListAsync(this IOpenhabClient operations, string galleryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGalleryWidgetListWithHttpMessagesAsync(galleryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details about a widget gallery item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryName'>
            /// gallery name e.g. 'community'
            /// </param>
            /// <param name='id'>
            /// id within the gallery
            /// </param>
            public static string GetGalleryWidgetsItem(this IOpenhabClient operations, string galleryName, string id)
            {
                return operations.GetGalleryWidgetsItemAsync(galleryName, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details about a widget gallery item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='galleryName'>
            /// gallery name e.g. 'community'
            /// </param>
            /// <param name='id'>
            /// id within the gallery
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetGalleryWidgetsItemAsync(this IOpenhabClient operations, string galleryName, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGalleryWidgetsItemWithHttpMessagesAsync(galleryName, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            public static void GetAll3(this IOpenhabClient operations, string acceptLanguage = default(string))
            {
                operations.GetAll3Async(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAll3Async(this IOpenhabClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAll3WithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all discovered things.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DiscoveryResultDTO GetAll4(this IOpenhabClient operations)
            {
                return operations.GetAll4Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all discovered things.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiscoveryResultDTO> GetAll4Async(this IOpenhabClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll4WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the discovery result from the inbox.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            public static void Delete(this IOpenhabClient operations, string thingUID)
            {
                operations.DeleteAsync(thingUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the discovery result from the inbox.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IOpenhabClient operations, string thingUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(thingUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Approves the discovery result by adding the thing to the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='body'>
            /// thing label
            /// </param>
            public static void Approve(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), string body = default(string))
            {
                operations.ApproveAsync(thingUID, acceptLanguage, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Approves the discovery result by adding the thing to the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='body'>
            /// thing label
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApproveAsync(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApproveWithHttpMessagesAsync(thingUID, acceptLanguage, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Flags a discovery result as ignored for further processing.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            public static void Ignore(this IOpenhabClient operations, string thingUID)
            {
                operations.IgnoreAsync(thingUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Flags a discovery result as ignored for further processing.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task IgnoreAsync(this IOpenhabClient operations, string thingUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.IgnoreWithHttpMessagesAsync(thingUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes ignore flag from a discovery result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            public static void Unignore(this IOpenhabClient operations, string thingUID)
            {
                operations.UnignoreAsync(thingUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes ignore flag from a discovery result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnignoreAsync(this IOpenhabClient operations, string thingUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnignoreWithHttpMessagesAsync(thingUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all available items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='type'>
            /// item type filter
            /// </param>
            /// <param name='tags'>
            /// item tag filter
            /// </param>
            /// <param name='metadata'>
            /// metadata selector
            /// </param>
            /// <param name='recursive'>
            /// get member items recursively
            /// </param>
            /// <param name='fields'>
            /// limit output to the given fields (comma separated)
            /// </param>
            public static IList<EnrichedItemDTO> GetItems(this IOpenhabClient operations, string acceptLanguage = default(string), string type = default(string), string tags = default(string), string metadata = default(string), bool? recursive = false, string fields = default(string))
            {
                return operations.GetItemsAsync(acceptLanguage, type, tags, metadata, recursive, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='type'>
            /// item type filter
            /// </param>
            /// <param name='tags'>
            /// item tag filter
            /// </param>
            /// <param name='metadata'>
            /// metadata selector
            /// </param>
            /// <param name='recursive'>
            /// get member items recursively
            /// </param>
            /// <param name='fields'>
            /// limit output to the given fields (comma separated)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EnrichedItemDTO>> GetItemsAsync(this IOpenhabClient operations, string acceptLanguage = default(string), string type = default(string), string tags = default(string), string metadata = default(string), bool? recursive = false, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsWithHttpMessagesAsync(acceptLanguage, type, tags, metadata, recursive, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a list of items to the registry or updates the existing items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// array of item data
            /// </param>
            public static string CreateOrUpdateItems(this IOpenhabClient operations, IList<GroupItemDTO> body)
            {
                return operations.CreateOrUpdateItemsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a list of items to the registry or updates the existing items.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// array of item data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreateOrUpdateItemsAsync(this IOpenhabClient operations, IList<GroupItemDTO> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateItemsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new member to a group item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// item name
            /// </param>
            /// <param name='memberItemName'>
            /// member item name
            /// </param>
            public static void AddMember(this IOpenhabClient operations, string itemName, string memberItemName)
            {
                operations.AddMemberAsync(itemName, memberItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new member to a group item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// item name
            /// </param>
            /// <param name='memberItemName'>
            /// member item name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddMemberAsync(this IOpenhabClient operations, string itemName, string memberItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddMemberWithHttpMessagesAsync(itemName, memberItemName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes an existing member from a group item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// item name
            /// </param>
            /// <param name='memberItemName'>
            /// member item name
            /// </param>
            public static void RemoveMember(this IOpenhabClient operations, string itemName, string memberItemName)
            {
                operations.RemoveMemberAsync(itemName, memberItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes an existing member from a group item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// item name
            /// </param>
            /// <param name='memberItemName'>
            /// member item name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveMemberAsync(this IOpenhabClient operations, string itemName, string memberItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveMemberWithHttpMessagesAsync(itemName, memberItemName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a single item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='metadata'>
            /// metadata selector
            /// </param>
            public static EnrichedItemDTO GetItemData(this IOpenhabClient operations, string itemname, string acceptLanguage = default(string), string metadata = default(string))
            {
                return operations.GetItemDataAsync(itemname, acceptLanguage, metadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='metadata'>
            /// metadata selector
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnrichedItemDTO> GetItemDataAsync(this IOpenhabClient operations, string itemname, string acceptLanguage = default(string), string metadata = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemDataWithHttpMessagesAsync(itemname, acceptLanguage, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a command to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)
            /// </param>
            public static void PostItemCommand(this IOpenhabClient operations, string itemname, string body)
            {
                operations.PostItemCommandAsync(itemname, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a command to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemCommandAsync(this IOpenhabClient operations, string itemname, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemCommandWithHttpMessagesAsync(itemname, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds a new item to the registry or updates the existing item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// item data
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static string CreateOrUpdateItem(this IOpenhabClient operations, string itemname, GroupItemDTO body, string acceptLanguage = default(string))
            {
                return operations.CreateOrUpdateItemAsync(itemname, body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new item to the registry or updates the existing item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// item data
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreateOrUpdateItemAsync(this IOpenhabClient operations, string itemname, GroupItemDTO body, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateItemWithHttpMessagesAsync(itemname, body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes an item from the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            public static void RemoveItem(this IOpenhabClient operations, string itemname)
            {
                operations.RemoveItemAsync(itemname).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes an item from the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveItemAsync(this IOpenhabClient operations, string itemname, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveItemWithHttpMessagesAsync(itemname, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds metadata to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='namespaceParameter'>
            /// namespace
            /// </param>
            /// <param name='body'>
            /// metadata
            /// </param>
            public static void AddMetadata(this IOpenhabClient operations, string itemname, string namespaceParameter, MetadataDTO body)
            {
                operations.AddMetadataAsync(itemname, namespaceParameter, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds metadata to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='namespaceParameter'>
            /// namespace
            /// </param>
            /// <param name='body'>
            /// metadata
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddMetadataAsync(this IOpenhabClient operations, string itemname, string namespaceParameter, MetadataDTO body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddMetadataWithHttpMessagesAsync(itemname, namespaceParameter, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes metadata from an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='namespaceParameter'>
            /// namespace
            /// </param>
            public static void RemoveMetadata(this IOpenhabClient operations, string itemname, string namespaceParameter)
            {
                operations.RemoveMetadataAsync(itemname, namespaceParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes metadata from an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='namespaceParameter'>
            /// namespace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveMetadataAsync(this IOpenhabClient operations, string itemname, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveMetadataWithHttpMessagesAsync(itemname, namespaceParameter, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the state of an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            public static string GetPlainItemState(this IOpenhabClient operations, string itemname)
            {
                return operations.GetPlainItemStateAsync(itemname).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the state of an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetPlainItemStateAsync(this IOpenhabClient operations, string itemname, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPlainItemStateWithHttpMessagesAsync(itemname, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the state of an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// valid item state (e.g. ON, OFF)
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void PutItemState(this IOpenhabClient operations, string itemname, string body, string acceptLanguage = default(string))
            {
                operations.PutItemStateAsync(itemname, body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the state of an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='body'>
            /// valid item state (e.g. ON, OFF)
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutItemStateAsync(this IOpenhabClient operations, string itemname, string body, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutItemStateWithHttpMessagesAsync(itemname, body, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds a tag to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='tag'>
            /// tag
            /// </param>
            public static void AddTag(this IOpenhabClient operations, string itemname, string tag)
            {
                operations.AddTagAsync(itemname, tag).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a tag to an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='tag'>
            /// tag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddTagAsync(this IOpenhabClient operations, string itemname, string tag, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddTagWithHttpMessagesAsync(itemname, tag, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes a tag from an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='tag'>
            /// tag
            /// </param>
            public static void RemoveTag(this IOpenhabClient operations, string itemname, string tag)
            {
                operations.RemoveTagAsync(itemname, tag).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a tag from an item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// item name
            /// </param>
            /// <param name='tag'>
            /// tag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveTagAsync(this IOpenhabClient operations, string itemname, string tag, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveTagWithHttpMessagesAsync(itemname, tag, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all available links.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ItemChannelLinkDTO GetAll5(this IOpenhabClient operations)
            {
                return operations.GetAll5Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available links.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemChannelLinkDTO> GetAll5Async(this IOpenhabClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll5WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tells whether automatic link mode is active or not
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static bool? IsAutomatic(this IOpenhabClient operations)
            {
                return operations.IsAutomaticAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tells whether automatic link mode is active or not
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsAutomaticAsync(this IOpenhabClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAutomaticWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves links.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            public static void GetLink(this IOpenhabClient operations, string itemName, string channelUID)
            {
                operations.GetLinkAsync(itemName, channelUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves links.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetLinkAsync(this IOpenhabClient operations, string itemName, string channelUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetLinkWithHttpMessagesAsync(itemName, channelUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Links item to a channel.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            /// <param name='body'>
            /// link data
            /// </param>
            public static void Link(this IOpenhabClient operations, string itemName, string channelUID, ItemChannelLinkDTO body = default(ItemChannelLinkDTO))
            {
                operations.LinkAsync(itemName, channelUID, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Links item to a channel.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            /// <param name='body'>
            /// link data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LinkAsync(this IOpenhabClient operations, string itemName, string channelUID, ItemChannelLinkDTO body = default(ItemChannelLinkDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LinkWithHttpMessagesAsync(itemName, channelUID, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unlinks item from a channel.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            public static void Unlink(this IOpenhabClient operations, string itemName, string channelUID)
            {
                operations.UnlinkAsync(itemName, channelUID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unlinks item from a channel.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemName'>
            /// itemName
            /// </param>
            /// <param name='channelUID'>
            /// channelUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnlinkAsync(this IOpenhabClient operations, string itemName, string channelUID, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnlinkWithHttpMessagesAsync(itemName, channelUID, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of persistence services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static IList<string> HttpGetPersistenceServices(this IOpenhabClient operations, string acceptLanguage = default(string))
            {
                return operations.HttpGetPersistenceServicesAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of persistence services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> HttpGetPersistenceServicesAsync(this IOpenhabClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HttpGetPersistenceServicesWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of items available via a specific persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            public static IList<string> HttpGetPersistenceServiceItems(this IOpenhabClient operations, string serviceId = default(string))
            {
                return operations.HttpGetPersistenceServiceItemsAsync(serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of items available via a specific persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> HttpGetPersistenceServiceItemsAsync(this IOpenhabClient operations, string serviceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HttpGetPersistenceServiceItemsWithHttpMessagesAsync(serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets item persistence data from the persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// The item name
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            /// <param name='starttime'>
            /// Start time of the data to return. Will default to 1 day before endtime.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='endtime'>
            /// End time of the data to return. Will default to current time.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='page'>
            /// Page number of data to return. This parameter will enable paging.
            /// </param>
            /// <param name='pagelength'>
            /// The length of each page.
            /// </param>
            /// <param name='boundary'>
            /// Gets one value before and after the requested period.
            /// </param>
            public static ItemHistoryDTO HttpGetPersistenceItemData(this IOpenhabClient operations, string itemname, string serviceId = default(string), string starttime = default(string), string endtime = default(string), int? page = default(int?), int? pagelength = default(int?), bool? boundary = default(bool?))
            {
                return operations.HttpGetPersistenceItemDataAsync(itemname, serviceId, starttime, endtime, page, pagelength, boundary).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets item persistence data from the persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// The item name
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            /// <param name='starttime'>
            /// Start time of the data to return. Will default to 1 day before endtime.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='endtime'>
            /// End time of the data to return. Will default to current time.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='page'>
            /// Page number of data to return. This parameter will enable paging.
            /// </param>
            /// <param name='pagelength'>
            /// The length of each page.
            /// </param>
            /// <param name='boundary'>
            /// Gets one value before and after the requested period.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemHistoryDTO> HttpGetPersistenceItemDataAsync(this IOpenhabClient operations, string itemname, string serviceId = default(string), string starttime = default(string), string endtime = default(string), int? page = default(int?), int? pagelength = default(int?), bool? boundary = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HttpGetPersistenceItemDataWithHttpMessagesAsync(itemname, serviceId, starttime, endtime, page, pagelength, boundary, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stores item persistence data into the persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// The item name.
            /// </param>
            /// <param name='time'>
            /// Time of the data to be stored. Will default to current time.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='state'>
            /// The state to store.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            public static ItemHistoryDTO HttpPutPersistenceItemData(this IOpenhabClient operations, string itemname, string time, string state, string serviceId = default(string))
            {
                return operations.HttpPutPersistenceItemDataAsync(itemname, time, state, serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stores item persistence data into the persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemname'>
            /// The item name.
            /// </param>
            /// <param name='time'>
            /// Time of the data to be stored. Will default to current time.
            /// [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='state'>
            /// The state to store.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service. If not provided the default service will be
            /// used
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemHistoryDTO> HttpPutPersistenceItemDataAsync(this IOpenhabClient operations, string itemname, string time, string state, string serviceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HttpPutPersistenceItemDataWithHttpMessagesAsync(itemname, time, state, serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete item data from a specific persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service.
            /// </param>
            /// <param name='itemname'>
            /// The item name.
            /// </param>
            /// <param name='starttime'>
            /// Start time of the data to return. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='endtime'>
            /// End time of the data to return. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            public static IList<string> HttpDeletePersistenceServiceItem(this IOpenhabClient operations, string serviceId, string itemname, string starttime, string endtime)
            {
                return operations.HttpDeletePersistenceServiceItemAsync(serviceId, itemname, starttime, endtime).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete item data from a specific persistence service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// Id of the persistence service.
            /// </param>
            /// <param name='itemname'>
            /// The item name.
            /// </param>
            /// <param name='starttime'>
            /// Start time of the data to return. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='endtime'>
            /// End time of the data to return. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> HttpDeletePersistenceServiceItemAsync(this IOpenhabClient operations, string serviceId, string itemname, string starttime, string endtime, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HttpDeletePersistenceServiceItemWithHttpMessagesAsync(serviceId, itemname, starttime, endtime, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all available profile types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='channelTypeUID'>
            /// channel type filter
            /// </param>
            /// <param name='itemType'>
            /// item type filter
            /// </param>
            public static IList<ProfileTypeDTO> GetAll6(this IOpenhabClient operations, string acceptLanguage = default(string), string channelTypeUID = default(string), string itemType = default(string))
            {
                return operations.GetAll6Async(acceptLanguage, channelTypeUID, itemType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available profile types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='channelTypeUID'>
            /// channel type filter
            /// </param>
            /// <param name='itemType'>
            /// item type filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProfileTypeDTO>> GetAll6Async(this IOpenhabClient operations, string acceptLanguage = default(string), string channelTypeUID = default(string), string itemType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll6WithHttpMessagesAsync(acceptLanguage, channelTypeUID, itemType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all configurable services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ConfigurableServiceDTO> GetAll7(this IOpenhabClient operations)
            {
                return operations.GetAll7Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all configurable services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConfigurableServiceDTO>> GetAll7Async(this IOpenhabClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll7WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get configurable service for given service ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            public static ConfigurableServiceDTO GetById1(this IOpenhabClient operations, string serviceId)
            {
                return operations.GetById1Async(serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get configurable service for given service ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigurableServiceDTO> GetById1Async(this IOpenhabClient operations, string serviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetById1WithHttpMessagesAsync(serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get service configuration for given service ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            public static string GetConfiguration1(this IOpenhabClient operations, string serviceId)
            {
                return operations.GetConfiguration1Async(serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get service configuration for given service ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetConfiguration1Async(this IOpenhabClient operations, string serviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfiguration1WithHttpMessagesAsync(serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a service configuration for given service ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='body'>
            /// </param>
            public static string UpdateConfiguration1(this IOpenhabClient operations, string serviceId, IDictionary<string, object> body = default(IDictionary<string, object>))
            {
                return operations.UpdateConfiguration1Async(serviceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a service configuration for given service ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpdateConfiguration1Async(this IOpenhabClient operations, string serviceId, IDictionary<string, object> body = default(IDictionary<string, object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConfiguration1WithHttpMessagesAsync(serviceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a service configuration for given service ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            public static string DeleteConfiguration(this IOpenhabClient operations, string serviceId)
            {
                return operations.DeleteConfigurationAsync(serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a service configuration for given service ID and returns the old
            /// configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeleteConfigurationAsync(this IOpenhabClient operations, string serviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteConfigurationWithHttpMessagesAsync(serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get existing multiple context service configurations for the given factory
            /// PID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            public static IList<ConfigurableServiceDTO> GetMultiConfigServicesByFactoryPid(this IOpenhabClient operations, string serviceId)
            {
                return operations.GetMultiConfigServicesByFactoryPidAsync(serviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get existing multiple context service configurations for the given factory
            /// PID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// service ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConfigurableServiceDTO>> GetMultiConfigServicesByFactoryPidAsync(this IOpenhabClient operations, string serviceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiConfigServicesByFactoryPidWithHttpMessagesAsync(serviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all available sitemaps.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetSitemaps(this IOpenhabClient operations)
            {
                operations.GetSitemapsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available sitemaps.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSitemapsAsync(this IOpenhabClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSitemapsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a sitemap event subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object CreateEventSubscription(this IOpenhabClient operations)
            {
                return operations.CreateEventSubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a sitemap event subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateEventSubscriptionAsync(this IOpenhabClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEventSubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get sitemap events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionid'>
            /// subscription id
            /// </param>
            /// <param name='sitemap'>
            /// sitemap name
            /// </param>
            /// <param name='pageid'>
            /// page id
            /// </param>
            public static void GetSitemapEvents(this IOpenhabClient operations, string subscriptionid, string sitemap = default(string), string pageid = default(string))
            {
                operations.GetSitemapEventsAsync(subscriptionid, sitemap, pageid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get sitemap events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionid'>
            /// subscription id
            /// </param>
            /// <param name='sitemap'>
            /// sitemap name
            /// </param>
            /// <param name='pageid'>
            /// page id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSitemapEventsAsync(this IOpenhabClient operations, string subscriptionid, string sitemap = default(string), string pageid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSitemapEventsWithHttpMessagesAsync(subscriptionid, sitemap, pageid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get sitemap by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sitemapname'>
            /// sitemap name
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='jsoncallback'>
            /// </param>
            public static void GetSitemapData(this IOpenhabClient operations, string sitemapname, string acceptLanguage = default(string), string type = default(string), string jsoncallback = "callback")
            {
                operations.GetSitemapDataAsync(sitemapname, acceptLanguage, type, jsoncallback).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get sitemap by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sitemapname'>
            /// sitemap name
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='jsoncallback'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSitemapDataAsync(this IOpenhabClient operations, string sitemapname, string acceptLanguage = default(string), string type = default(string), string jsoncallback = "callback", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSitemapDataWithHttpMessagesAsync(sitemapname, acceptLanguage, type, jsoncallback, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Polls the data for a sitemap.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sitemapname'>
            /// sitemap name
            /// </param>
            /// <param name='pageid'>
            /// page id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='subscriptionid'>
            /// subscriptionid
            /// </param>
            public static void GetPageData(this IOpenhabClient operations, string sitemapname, string pageid, string acceptLanguage = default(string), string subscriptionid = default(string))
            {
                operations.GetPageDataAsync(sitemapname, pageid, acceptLanguage, subscriptionid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Polls the data for a sitemap.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sitemapname'>
            /// sitemap name
            /// </param>
            /// <param name='pageid'>
            /// page id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='subscriptionid'>
            /// subscriptionid
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetPageDataAsync(this IOpenhabClient operations, string sitemapname, string pageid, string acceptLanguage = default(string), string subscriptionid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetPageDataWithHttpMessagesAsync(sitemapname, pageid, acceptLanguage, subscriptionid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all available thing types without config description, channels and
            /// properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static IList<StrippedThingTypeDTO> GetAll8(this IOpenhabClient operations, string acceptLanguage = default(string))
            {
                return operations.GetAll8Async(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available thing types without config description, channels and
            /// properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StrippedThingTypeDTO>> GetAll8Async(this IOpenhabClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll8WithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets thing type by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingTypeUID'>
            /// thingTypeUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static ThingTypeDTO GetByUID1(this IOpenhabClient operations, string thingTypeUID, string acceptLanguage = default(string))
            {
                return operations.GetByUID1Async(thingTypeUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets thing type by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingTypeUID'>
            /// thingTypeUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThingTypeDTO> GetByUID1Async(this IOpenhabClient operations, string thingTypeUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByUID1WithHttpMessagesAsync(thingTypeUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all available things.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static IList<EnrichedThingDTO> GetAll9(this IOpenhabClient operations, string acceptLanguage = default(string))
            {
                return operations.GetAll9Async(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available things.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EnrichedThingDTO>> GetAll9Async(this IOpenhabClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAll9WithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new thing and adds it to the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// thing data
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static string Create(this IOpenhabClient operations, ThingDTO body, string acceptLanguage = default(string))
            {
                return operations.CreateAsync(body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new thing and adds it to the registry.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// thing data
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreateAsync(this IOpenhabClient operations, ThingDTO body, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets thing by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static ThingDTO GetByUID2(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string))
            {
                return operations.GetByUID2Async(thingUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets thing by UID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThingDTO> GetByUID2Async(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByUID2WithHttpMessagesAsync(thingUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a thing.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='body'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static ThingDTO Update(this IOpenhabClient operations, string thingUID, ThingDTO body, string acceptLanguage = default(string))
            {
                return operations.UpdateAsync(thingUID, body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a thing.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='body'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThingDTO> UpdateAsync(this IOpenhabClient operations, string thingUID, ThingDTO body, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(thingUID, body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a thing from the registry. Set 'force' to __true__ if you want the
            /// thing te be removed immediately.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='force'>
            /// force
            /// </param>
            public static void Remove(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), bool? force = false)
            {
                operations.RemoveAsync(thingUID, acceptLanguage, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a thing from the registry. Set 'force' to __true__ if you want the
            /// thing te be removed immediately.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='force'>
            /// force
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAsync(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), bool? force = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveWithHttpMessagesAsync(thingUID, acceptLanguage, force, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates thing's configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='body'>
            /// configuration parameters
            /// </param>
            public static ThingDTO UpdateConfiguration2(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), IDictionary<string, object> body = default(IDictionary<string, object>))
            {
                return operations.UpdateConfiguration2Async(thingUID, acceptLanguage, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates thing's configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='body'>
            /// configuration parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThingDTO> UpdateConfiguration2Async(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), IDictionary<string, object> body = default(IDictionary<string, object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConfiguration2WithHttpMessagesAsync(thingUID, acceptLanguage, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets thing's config status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            public static string GetConfigStatus(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string))
            {
                return operations.GetConfigStatusAsync(thingUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets thing's config status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetConfigStatusAsync(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigStatusWithHttpMessagesAsync(thingUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the thing enabled status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='body'>
            /// enabled
            /// </param>
            public static string SetEnabled(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), string body = default(string))
            {
                return operations.SetEnabledAsync(thingUID, acceptLanguage, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the thing enabled status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='body'>
            /// enabled
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> SetEnabledAsync(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetEnabledWithHttpMessagesAsync(thingUID, acceptLanguage, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets thing's firmware status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            public static void GetFirmwareStatus(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string))
            {
                operations.GetFirmwareStatusAsync(thingUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets thing's firmware status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetFirmwareStatusAsync(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetFirmwareStatusWithHttpMessagesAsync(thingUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update thing firmware.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='firmwareVersion'>
            /// version
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void UpdateFirmware(this IOpenhabClient operations, string thingUID, string firmwareVersion, string acceptLanguage = default(string))
            {
                operations.UpdateFirmwareAsync(thingUID, firmwareVersion, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update thing firmware.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='firmwareVersion'>
            /// version
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateFirmwareAsync(this IOpenhabClient operations, string thingUID, string firmwareVersion, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateFirmwareWithHttpMessagesAsync(thingUID, firmwareVersion, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all available firmwares for provided thing UID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static void GetFirmwares(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string))
            {
                operations.GetFirmwaresAsync(thingUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all available firmwares for provided thing UID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thingUID
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetFirmwaresAsync(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetFirmwaresWithHttpMessagesAsync(thingUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets thing's status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            public static string GetStatus(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string))
            {
                return operations.GetStatusAsync(thingUID, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets thing's status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thingUID'>
            /// thing
            /// </param>
            /// <param name='acceptLanguage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetStatusAsync(this IOpenhabClient operations, string thingUID, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(thingUID, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// A unified unique id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetInstanceUUID(this IOpenhabClient operations)
            {
                return operations.GetInstanceUUIDAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// A unified unique id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetInstanceUUIDAsync(this IOpenhabClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceUUIDWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of all interpreters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void GetInterpreters(this IOpenhabClient operations, string acceptLanguage = default(string))
            {
                operations.GetInterpretersAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of all interpreters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetInterpretersAsync(this IOpenhabClient operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetInterpretersWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sends a text to the default human language interpreter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// text to interpret
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void Interpret(this IOpenhabClient operations, string body, string acceptLanguage = default(string))
            {
                operations.InterpretAsync(body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a text to the default human language interpreter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// text to interpret
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InterpretAsync(this IOpenhabClient operations, string body, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InterpretWithHttpMessagesAsync(body, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a single interpreters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// interpreter id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void GetInterpreter(this IOpenhabClient operations, string id, string acceptLanguage = default(string))
            {
                operations.GetInterpreterAsync(id, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single interpreters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// interpreter id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetInterpreterAsync(this IOpenhabClient operations, string id, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetInterpreterWithHttpMessagesAsync(id, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sends a text to a given human language interpreter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// text to interpret
            /// </param>
            /// <param name='id'>
            /// interpreter id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            public static void Interpret1(this IOpenhabClient operations, string body, string id, string acceptLanguage = default(string))
            {
                operations.Interpret1Async(body, id, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a text to a given human language interpreter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// text to interpret
            /// </param>
            /// <param name='id'>
            /// interpreter id
            /// </param>
            /// <param name='acceptLanguage'>
            /// language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Interpret1Async(this IOpenhabClient operations, string body, string id, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Interpret1WithHttpMessagesAsync(body, id, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
